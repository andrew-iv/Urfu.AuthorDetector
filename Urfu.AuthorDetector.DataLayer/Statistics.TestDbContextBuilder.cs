//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Urfu.AuthorDetector.DataLayer
{
    
    	using System;
    	using System.Collections.Generic;
    	using System.Linq;
    
    	
    
    	using Moq;
    
    	
    	public class DbContextBuilder
    	{   
    
    	   
    
    		public InMemoryDbSet<Post> Posts = new InMemoryDbSet<Post>();
    
    	   
    
    		public InMemoryDbSet<Theme> Themes = new InMemoryDbSet<Theme>();
    
    	   
    
    		public InMemoryDbSet<Author> Authors = new InMemoryDbSet<Author>();
    
    	   
    
    		public InMemoryDbSet<Forum> ForumSet = new InMemoryDbSet<Forum>();
    
    	
    	    public virtual Mock<IStatisticsContext>  BuildMockDbContext(MockBehavior mockBehavior)
    	    {
    	        var mockDbContext = new Mock<IStatisticsContext>(mockBehavior);
    	   	
    			mockDbContext
    				.Setup(context => context.Posts)
    				.Returns(Posts);
    
        		mockDbContext
                    .Setup(context => context.Add(It.IsAny<Post>()))
                    .Callback((Post dataRow) => Posts.Add(dataRow));		
    	   	
    			mockDbContext
    				.Setup(context => context.Themes)
    				.Returns(Themes);
    
        		mockDbContext
                    .Setup(context => context.Add(It.IsAny<Theme>()))
                    .Callback((Theme dataRow) => Themes.Add(dataRow));		
    	   	
    			mockDbContext
    				.Setup(context => context.Authors)
    				.Returns(Authors);
    
        		mockDbContext
                    .Setup(context => context.Add(It.IsAny<Author>()))
                    .Callback((Author dataRow) => Authors.Add(dataRow));		
    	   	
    			mockDbContext
    				.Setup(context => context.ForumSet)
    				.Returns(ForumSet);
    
        		mockDbContext
                    .Setup(context => context.Add(It.IsAny<Forum>()))
                    .Callback((Forum dataRow) => ForumSet.Add(dataRow));		
    		
    			return mockDbContext;	
    		}
    
    	  	public Mock<IStatisticsContext> BuildMockDbContext()
    	    {
    	        return BuildMockDbContext(MockBehavior.Default);
    	    }
    
    		public IStatisticsContext BuildDbContext()
    		{
    		    var dbContext = Mock.Of<IStatisticsContext>(
    		          context =>
    	   
    			context.Posts == Posts.AsQueryable()	
    	   
    			&& context.Themes == Themes.AsQueryable()	
    	   
    			&& context.Authors == Authors.AsQueryable()	
    	   
    			&& context.ForumSet == ForumSet.AsQueryable()	
    				);
    		return dbContext;
    		}
    
    	}
    
}
